(function (a) { a.fn.dashboard = function (b) { function f() { c.log("entering fixSortableColumns function", 1); a(".nonsortablecolumn").removeClass("nonsortablecolumn").addClass(h.columnClass); a("." + h.columnClass).filter(function () { return a(this).css("display") == "none" }).addClass("nonsortablecolumn").removeClass(h.columnClass) } function g(a) { c.log("entering getColumnIdentifier function", 1); var b; var d = a.split(" "); for (var e = 0; e < d.length; e++) { if (d[e].indexOf(h.columnPrefix) == 0) { b = d[e] } } return b.replace(h.columnPrefix, "") } function k(b) { c.log("entering widget constructor", 1); b = a.extend({}, a.fn.dashboard.widget.defaults, b); b.openContent = function () { b.element.find(".widgetOpen").hide(); b.element.find(".widgetClose").show(); c.log("entering openContent function", 1); b.open = true; if (!b.loaded) { if (this.url != "" && this.url != null && typeof this.url != "undefined") { a(h.loadingHtml).appendTo(b.element.find("." + h.widgetContentClass)); c.log("widgetShow event thrown for widget " + b.id, 2); b.element.trigger("widgetShow", { widget: b }); b.element.find("." + h.widgetContentClass).load(this.url, function (a, d, e) { if (d == "error") { b.element.find("." + h.widgetContentClass).html(h.widgetNotFoundHtml) } b.loaded = true; c.log("widgetLoaded event thrown for widget " + b.id, 2); b.element.trigger("widgetLoaded", { widget: b }) }) } else { c.log("widgetShow event thrown for widget " + b.id, 2); b.element.trigger("widgetShow", { widget: b }); c.log("widgetLoaded event thrown", 2); b.element.trigger("widgetLoaded", { widget: b }) } } else { c.log("widgetShow event thrown for widget " + b.id, 2); b.element.trigger("widgetShow", { widget: b }) } if (c.initialized) { c.log("dashboardStateChange event thrown for widget " + b.id, 2); c.element.trigger("dashboardStateChange", { stateChange: "widgetOpened", widget: b }) } }; b.refreshContent = function () { c.log("entering refreshContent function", 1); b.loaded = false; if (b.open) { b.openContent() } }; b.setTitle = function (a) { c.log("entering setTitle function", 1); b.title = a; b.element.find("." + h.widgetTitleClass).html(a); if (c.initialized) { c.log("dashboardStateChange event thrown for widget " + b.id, 2); c.element.trigger("dashboardStateChange", { stateChange: "titleChanged", widget: b }) } }; b.closeContent = function () { c.log("entering closeContent function", 1); b.open = false; c.log("widgetHide event thrown for widget " + b.id, 2); b.element.trigger("widgetHide", { widget: b }); b.element.find(".widgetOpen").show(); b.element.find(".widgetClose").hide(); c.log("dashboardStateChange event thrown for widget " + b.id, 2); c.element.trigger("dashboardStateChange", { stateChange: "widgetClosed", widget: b }) }; b.addMetadataValue = function (a, d) { c.log("entering addMetadataValue function", 1); if (typeof b.metadata == "undefined") { b.metadata = {} } b.metadata[a] = d; c.log("dashboardStateChange event thrown for widget " + b.id, 2); c.element.trigger("dashboardStateChange", { stateChange: "metadataChanged", widget: b }) }; b.openMenu = function () { c.log("entering openMenu function", 1); b.element.find("." + h.menuClass).show() }; b.closeMenu = function () { c.log("entering closeMenu function", 1); b.element.find("." + h.menuClass).hide() }; b.remove = function () { c.log("entering remove function", 1); b.element.remove(); c.log("widgetDeleted event thrown for widget " + b.id, 2); b.element.trigger("widgetDeleted", { widget: b }); c.log("dashboardStateChange event thrown for widget " + b.id, 2); c.element.trigger("dashboardStateChange", { stateChange: "widgetRemoved", widget: b }) }; b.serialize = function () { c.log("entering serialize function", 1); var a = '{"title" : "' + b.title + '", "id" : "' + b.id + '", "column" : "' + b.column + '","editurl" : "' + b.editurl + '","open" : ' + b.open + ',"url" : "' + b.url + '"'; if (typeof b.metadata != "undefined") { a += ',"metadata":{'; var d = b.metadata; var e = 0; for (var f in d) { if (e > 0) { a += "," } a += '"' + f + '":"' + d[f] + '"'; e++ } a += "}" } a += "}"; return a }; b.openFullscreen = function () { c.log("entering openFullscreen function", 1); b.fullscreen = true; var d = a("." + h.columnClass); d.hide(); var e = a('<ul id="fullscreen_' + c.id + '"></ul>'); e.appendTo(c.element); b.element.parent().attr("id", "placeholder"); b.element.appendTo(e) }; b.closeFullscreen = function () { c.log("entering closeFullscreen function", 1); b.fullscreen = false; var d = a("#placeholder"); b.element.appendTo(d); a("#fullscreen_" + c.id).remove(); var e = a("." + h.columnClass); e.show() }; b.openSettings = function () { c.log("entering openSettings function", 1); b.element.trigger("editSettings", { widget: b }) }; if (b.open) { b.openContent() } b.initialized = true; c.log("widgetInitialized event thrown", 2); b.element.trigger("widgetInitialized", { widget: b }); return b } function l(b) { c.log("entering getLayout function", 1); var d = null; var e = null; if (typeof h.layouts != "undefined") { a.each(h.layouts, function (a, c) { if (a == 0) { e = c } if (c.id == b) { d = c } }) } if (d == null) { d = e } return d } function m() { if (a("." + j.selectLayoutClass).length == 0) c.log("Unable to find " + j.selectLayoutClass, 5); a("." + j.selectLayoutClass).bind("click", function (b) { var d = c.layout; c.log("dashboardCloseLayoutDialog event thrown", 2); c.element.trigger("dashboardCloseLayoutDialog"); var e = l(a(this).attr("id")); c.layout = e; if (typeof h.layoutClass != "undefined") { c.element.find("." + h.layoutClass).removeClass(d.classname).addClass(e.classname); f(); a("." + h.columnClass).each(function () { if (a(this).children().length == 0) { a(this).html('<div class="emptycolumn">' + h.emptyColumnHtml + "</div>") } }); if (a("." + h.columnClass).length == 0) c.log("Unable to find " + h.columnClass, 5); c.element.find(".nonsortablecolumn").each(function () { a(this).children().appendTo(c.element.find("." + h.columnClass + ":first")); a(".emptycolumn").remove() }) } else { var g = a('<div style="display:none" id="tempdashboard"></div>'); g.appendTo(a("body")); c.element.children().appendTo(g); c.init() } c.log("dashboardChangeLayout event thrown", 2); c.element.trigger("dashboardLayoutChanged") }); return false } var c = {}; var d; var e; c.layout; c.element = this; c.id = this.attr("id"); c.widgets = {}; c.widgetsToAdd = {}; c.widgetCategories = {}; c.initialized = false; c.serialize = function () { c.log("entering serialize function", 1); var b = '{"layout": "' + c.layout.id + '", "data" : ['; var d = 0; if (a("." + h.columnClass).length == 0) c.log(h.columnClass + " class not found", 5); a("." + h.columnClass).each(function () { a(this).children().each(function () { if (a(this).hasClass(h.widgetClass)) { if (d > 0) { b += "," } b += c.getWidget(a(this).attr("id")).serialize(); d++ } }) }); b += "]}"; return b }; c.log = function (a, b) { if (b >= h.debuglevel && typeof console != "undefined") { var c = ""; if (b == 1) c = "INFO"; if (b == 2) c = "EVENT"; if (b == 3) c = "WARNING"; if (b == 5) c = "ERROR"; console.log(c + " - " + a) } }; c.setLayout = function (b) { if (b != null) { c.log("entering setLayout function with layout " + b.id, 1) } else { c.log("entering setLayout function with layout null", 1) } c.layout = b; d.remove(); if (c.layout != null) { if (typeof h.layoutClass != "undefined") { this.element.find("." + h.layoutClass).addClass(c.layout.classname) } else { this.element.html(c.layout.html) } } a("." + h.columnClass).sortable({ connectWith: a("." + h.columnClass), opacity: h.opacity, placeholder: "selectedcolumn", handle: "." + h.widgetHeaderClass, revert: "invalid", receive: function (b, d) { var e = c.getWidget(d.item.attr("id")); e.column = g(a(this).attr("class")); c.log("dashboardStateChange event thrown for widget " + e.id, 2); c.element.trigger("dashboardStateChange", { stateChange: "widgetMoved", widget: e }); c.log("widgetDropped event thrown for widget " + e.id, 2); e.element.trigger("widgetDropped", { widget: e }) }, deactivate: function (b, d) { c.log("Widget is dropped: check if the column is now empty.", 1); var e = a(this).children().length; if (e == 0) { c.log("adding the empty text to the column", 1); a(this).html('<div class="emptycolumn">' + h.emptyColumnHtml + "</div>") } else { if (e == 2) { a(this).find(".emptycolumn").remove() } } }, start: function (b, c) { a("div .column").each(function () { a(this).find(".emptycolumn").remove() }); c.item.find("." + h.widgetTitleClass).addClass("noclick"); c.placeholder.height(c.helper.height()) }, stop: function (a, b) { setTimeout(function () { b.item.find("." + h.widgetTitleClass).removeClass("noclick") }, 300) } }); f(); c.log("dashboardLayoutLoaded event thrown", 2); c.element.trigger("dashboardLayoutLoaded") }; c.loadLayout = function () { c.log("entering loadLayout function", 1); if (typeof h.json_data.url != "undefined" && h.json_data.url.length > 0) { c.log("Getting JSON feed : " + h.json_data.url, 1); a.getJSON(h.json_data.url, function (a) { if (a == null) { alert("Unable to get json. If you are using chrome: there is an issue with loading json with local files. It works on a server :-)", 5); return } var b = a.result; var d = typeof c.layout != "undefined" ? c.layout : l(b.layout); c.setLayout(d); c.loadWidgets(b.data) }) } else { var b = typeof c.layout != "undefined" ? c.layout : l(json.layout); c.setLayout(b); c.loadWidgets(h.json_data.data) } }; c.addWidget = function (b, d) { c.log("entering addWidget function", 1); var e = b.id; if (typeof c.widgets[e] != "undefined" && a("#" + e).length > 0) { var f = a("#" + e); d = c.widgets[e].column; f.appendTo(d) } else { c.log("Applying template : " + h.widgetTemplate, 1); if (a("#" + h.widgetTemplate).length == 0) c.log('Template "' + h.widgetTemplate + " not found", 5); var g = tmpl(a("#" + h.widgetTemplate).html(), b); var f = a(g); f.appendTo(d); c.widgets[e] = k({ id: e, element: f, column: b.column, url: typeof b.url != "undefined" ? b.url : null, editurl: b.editurl, title: b.title, open: b.open, metadata: b.metadata }) } c.log("widgetAdded event thrown for widget " + e, 2); c.widgets[e].element.trigger("widgetAdded", { widget: c.widgets[e] }); if (c.initialized) { c.log("dashboardStateChange event thrown for widget " + e, 2); c.element.trigger("dashboardStateChange", { stateChange: "widgetAdded", widget: f }) } }; c.loadWidgets = function (b) { c.log("entering loadWidgets function", 1); c.element.find("." + h.columnClass).empty(); a(b).each(function () { var a = this.column; c.addWidget(this, c.element.find("." + h.columnPrefix + a)) }); a("#tempdashboard").find("." + h.widgetClass).each(function () { var b = c.element.find("." + h.columnClass + ":first"); a(this).appendTo(b); c.getWidget(a(this).attr("id")).column = b.attr("id") }); a("#tempdashboard").remove(); a("." + h.columnClass).each(function () { if (a(this).children().length == 0) { a(this).html('<div class="emptycolumn">' + h.emptyColumnHtml + "</div>") } }); c.initialized = true }; c.init = function () { c.log("entering init function", 1); c.loadLayout() }; c.getWidget = function (a) { c.log("entering getWidget function", 1); var b = c.widgets[a]; if (typeof b != "undefined") { return b } else { return null } }; var h = a.extend({}, a.fn.dashboard.defaults, b); var i = a.extend({}, a.fn.dashboard.defaults.addWidgetSettings, b.addWidgetSettings); var j = a.extend({}, a.fn.dashboard.defaults.editLayoutSettings, b.editLayoutSettings); var d = a(h.loadingHtml).appendTo(c.element); a("#" + c.id + " .menutrigger").live("click", function () { c.log("widgetOpenMenu event thrown for widget " + k.id, 2); var b = c.getWidget(a(this).closest("." + h.widgetClass).attr("id")); b.element.trigger("widgetOpenMenu", { widget: b }); return false }); a("#" + c.id + " ." + h.widgetFullScreenClass).live("click", function (b) { c.log("widgetCloseMenu event thrown for widget " + k.id, 2); var d = c.getWidget(a(this).closest("." + h.widgetClass).attr("id")); d.element.trigger("widgetCloseMenu", { widget: d }); if (d.fullscreen) { c.log("widgetCloseFullScreen event thrown for widget " + d.id, 2); d.element.trigger("widgetCloseFullScreen", { widget: d }) } else { c.log("widgetOpenFullScreen event thrown for widget " + d.id, 2); d.element.trigger("widgetOpenFullScreen", { widget: d }) } return false }); a("#" + c.id + " .controls li").live("click", function (b) { c.log("widgetCloseMenu event thrown for widget " + k.id, 2); var d = c.getWidget(a(this).closest("." + h.widgetClass).attr("id")); d.element.trigger("widgetCloseMenu", { widget: d }); c.log(a(this).attr("class") + " event thrown for widget " + k.id, 2); var d = c.getWidget(a(this).closest("." + h.widgetClass).attr("id")); d.element.trigger(a(this).attr("class"), { widget: d }); return false }); a("#" + c.id + " ." + h.widgetClass).live("widgetCloseMenu", function (b, d) { c.log("Closing menu " + a(this).attr("id"), 1); d.widget.closeMenu() }); a("#" + c.id + " ." + h.widgetClass).live("widgetOpenMenu", function (b, d) { c.log("Opening menu " + a(this).attr("id"), 1); d.widget.openMenu() }); a("#" + c.id + " ." + h.widgetClass).live("widgetDelete", function (b, d) { if (confirm(h.deleteConfirmMessage)) { c.log("Removing widget " + a(this).attr("id"), 1); d.widget.remove() } }); a("#" + c.id + " ." + h.widgetClass).live("widgetRefresh", function (a, b) { b.widget.refreshContent() }); a("#" + c.id + " ." + h.widgetClass).live("widgetSetTitle", function (a, b) { b.widget.setTitle(b.title) }); a("#" + c.id + " ." + h.widgetClass).live("widgetClose", function (b, d) { c.log("Closing widget " + a(this).attr("id"), 1); d.widget.closeContent() }); a("#" + c.id + " ." + h.widgetClass).live("widgetOpen", function (b, d) { c.log("Opening widget " + a(this).attr("id"), 1); d.widget.openContent() }); a("#" + c.id + " ." + h.widgetClass).live("widgetShow", function () { a(this).find("." + h.widgetContentClass).show() }); a("#" + c.id + " ." + h.widgetClass).live("widgetHide", function () { a(this).find("." + h.widgetContentClass).hide() }); a("#" + c.id + " ." + h.widgetClass).live("widgetAddMetadataValue", function (b, d) { c.log("Changing metadata for widget " + a(this).attr("id") + ", metadata name: " + d.name + ", value: " + d.value, 1); d.widget.addMetadataValue(d.name, d.value) }); a("#" + c.id + " ." + h.widgetTitleClass).live("click", function (b) { c.log("Click on the header detected for widget " + a(this).attr("id"), 1); if (!a(this).hasClass("noclick")) { var d = c.getWidget(a(this).closest("." + h.widgetClass).attr("id")); if (d.open) { c.log("widgetClose event thrown for widget " + d, 2); d.element.trigger("widgetClose", { widget: d }) } else { c.log("widgetOpen event thrown for widget " + d, 2); d.element.trigger("widgetOpen", { widget: d }) } } return false }); a("#" + c.id + " ." + h.widgetHeaderClass).live("mouseover", function () { a(this).find("." + h.iconsClass).removeClass("hidden") }); a("#" + c.id + " ." + h.widgetHeaderClass).live("mouseout", function () { a(this).find("." + h.iconsClass).addClass("hidden") }); a("body").click(function () { a("." + h.menuClass).hide() }); a("#" + c.id + " ." + h.widgetClass).live("widgetOpenFullScreen", function (a, b) { b.widget.openFullscreen() }); a("." + h.widgetClass).live("widgetCloseFullScreen", function (a, b) { b.widget.closeFullscreen() }); a("#" + c.id + " ." + h.widgetClass).live("widgetEdit", function (a, b) { b.widget.openSettings() }); if (a("#" + i.dialogId).length == 0) c.log("Unable to find " + i.dialogId, 5); a("#" + i.dialogId).dialog({ autoOpen: false, height: 514, width: 750, modal: true, buttons: { Cancel: function () { a(this).dialog("close") } }, close: function () { } }); if (a("#" + j.dialogId).length == 0) c.log("Unable to find " + j.dialogId, 5); a("#" + j.dialogId).dialog({ autoOpen: false, height: 300, width: 600, modal: true }); a("." + j.openDialogClass).live("click", function () { c.log("dashboardOpenLayoutDialog event thrown", 2); c.element.trigger("dashboardOpenLayoutDialog"); return false }); c.element.live("dashboardOpenLayoutDialog", function () { c.log("Opening dialog " + j.dialogId, 1); a("#" + j.dialogId).dialog("open"); var b = a("#" + j.dialogId).find("." + j.layoutClass); b.empty(); if (b.children().length == 0) { c.log("Number of layouts : " + h.layouts.length, 1); a.each(h.layouts, function (d, e) { c.log("Applying template : " + j.layoutTemplate, 1); if (a("#" + j.layoutTemplate).length == 0) c.log('Template "' + j.layoutTemplate + " not found", 5); b.append(tmpl(a("#" + j.layoutTemplate).html(), e)) }) } a("." + j.selectLayoutClass).removeClass(j.selectedLayoutClass); a("#" + c.layout.id).addClass(j.selectedLayoutClass); m() }); c.element.live("dashboardStateChange", function () { if (typeof h.stateChangeUrl != "undefined" && h.stateChangeUrl != null && h.stateChangeUrl != "") { a.ajax({ type: "POST", url: h.stateChangeUrl, data: { dashboard: c.element.attr("id"), settings: c.serialize() }, success: function (a) { if (a == "NOK" || a.indexOf("<response>NOK</response>") != -1) { c.log("dashboardSaveFailed event thrown", 2); c.element.trigger("dashboardSaveFailed") } else { c.log("dashboardSuccessfulSaved event thrown", 2); c.element.trigger("dashboardSuccessfulSaved") } }, error: function (a, b, d) { c.log("dashboardSaveFailed event thrown", 2); c.element.trigger("dashboardSaveFailed") }, dataType: "text" }) } }); c.element.live("dashboardCloseLayoutDialog", function () { a("#" + j.dialogId).dialog("close") }); a("." + i.selectCategoryClass).live("click", function () { c.log("addWidgetDialogSelectCategory event thrown", 2); c.element.trigger("addWidgetDialogSelectCategory", { category: a(this) }); return false }); c.element.live("addWidgetDialogSelectCategory", function (b, d) { a("." + i.selectCategoryClass).removeClass(i.selectedCategoryClass); a("#" + i.dialogId).find("." + i.widgetClass).empty(); a(d.category).addClass(i.selectedCategoryClass); url = c.widgetCategories[a(d.category).attr("id")]; c.log("Getting JSON feed : " + url, 1); a.getJSON(url, { cache: true }, function (b) { if (b.result.data == 0) c.log("Empty data returned", 3); var d = b.result.data; if (typeof b.result.data.length == "undefined") { d = new Array(b.result.data) } a.each(d, function (b, d) { c.widgetsToAdd[d.id] = d; c.log("Applying template : " + i.widgetTemplate, 1); if (a("#" + i.widgetTemplate).length == 0) c.log('Template "' + i.widgetTemplate + " not found", 5); var e = tmpl(a("#" + i.widgetTemplate).html(), d); a("#" + i.dialogId).find("." + i.widgetClass).append(e) }) }); c.log("addWidgetDialogWidgetsLoaded event thrown", 2); c.element.trigger("addWidgetDialogWidgetsLoaded") }); a("." + i.addWidgetClass).live("click", function () { var b = c.widgetsToAdd[a(this).attr("id").replace("addwidget", "")]; c.log("dashboardAddWidget event thrown", 2); c.element.trigger("dashboardAddWidget", { widget: b }); c.log("dashboardCloseWidgetDialog event thrown", 2); c.element.trigger("dashboardCloseWidgetDialog"); return false }); a("." + i.openDialogClass).live("click", function () { c.log("dashboardOpenWidgetDialog event thrown", 2); c.element.trigger("dashboardOpenWidgetDialog"); return false }); c.element.live("dashboardCloseWidgetDialog", function () { a("#" + i.dialogId).dialog("close") }); c.element.live("dashboardOpenWidgetDialog", function () { a("#" + i.dialogId).find("." + i.categoryClass).empty(); a("#" + i.dialogId).find("." + i.widgetClass).empty(); c.log("Opening dialog " + i.dialogId, 1); a("#" + i.dialogId).dialog("open"); c.log("Getting JSON feed : " + i.widgetDirectoryUrl, 1); a.getJSON(i.widgetDirectoryUrl, function (b) { if (b.category == 0) c.log("Empty data returned", 3); a.each(b.categories.category, function (b, d) { c.widgetCategories[d.id] = d.url; c.log("Applying template : " + i.categoryTemplate, 1); if (a("#" + i.categoryTemplate).length == 0) c.log('Template "' + i.categoryTemplate + " not found", 5); var e = tmpl(a("#" + i.categoryTemplate).html(), d); a("#" + i.dialogId).find("." + i.categoryClass).append(e) }); c.log("addWidgetDialogCategoriesLoaded event thrown", 2); c.element.trigger("addWidgetDialogCategoriesLoaded"); c.log("addWidgetDialogSelectCategory event thrown", 2); c.element.trigger("addWidgetDialogSelectCategory", { category: a("#" + i.dialogId).find("." + i.categoryClass + ">li:first") }) }) }); return c }; a.fn.dashboard.defaults = { debuglevel: 3, json_data: {}, loadingHtml: '<div class="loading"><img alt="Loading, please wait" src="/Images/Dashboard/loading.gif" /><p>Loading...</p></div>', emptyColumnHtml: "Drag your widgets here", widgetTemplate: "widgettemplate", columnPrefix: "column-", opacity: "0.2", deleteConfirmMessage: "Are you sure you want to delete this widget?", widgetNotFoundHtml: "The content of this widget is not available anymore. You may remove this widget.", columnClass: "column", widgetClass: "widget", menuClass: "controls", widgetContentClass: "widgetcontent", widgetTitleClass: "widgettitle", widgetHeaderClass: "widgetheader", widgetFullScreenClass: "widgetopenfullscreen", iconsClass: "icons", stateChangeUrl: "", addWidgetSettings: { openDialogClass: "openaddwidgetdialog", addWidgetClass: "addwidget", selectCategoryClass: "selectcategory", selectedCategoryClass: "selected", categoryClass: "categories", widgetClass: "widgets", dialogId: "addwidgetdialog", categoryTemplate: "categorytemplate", widgetTemplate: "addwidgettemplate" }, editLayoutSettings: { dialogId: "editLayout", layoutClass: "layoutselection", selectLayoutClass: "layoutchoice", selectedLayoutClass: "selected", openDialogClass: "editlayout", layoutTemplate: "selectlayouttemplate" } }; a.fn.dashboard.widget = { defaults: { open: true, fullscreen: false, loaded: false, url: "", metadata: {} } } })(jQuery); (function () { var a = {}; this.tmpl = function b(c, d) { var e = !/\W/.test(c) ? a[c] = a[c] || b(document.getElementById(c).innerHTML) : new Function("obj", "var p=[],print=function(){p.push.apply(p,arguments);};" + "with(obj){p.push('" + c.replace(/[\r\t\n]/g, " ").split("<%").join("	").replace(/((^|%>)[^\t]*)'/g, "$1\r").replace(/\t=(.*?)%>/g, "',$1,'").split("	").join("');").split("%>").join("p.push('").split("\r").join("\\'") + "');}return p.join('');"); return d ? e(d) : e } })()